{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation - Coworking Cette documentation a pour but de pr\u00e9senter le projet de CoWorking de l'entreprise Initiative Pays d'Arles, ses intervenants, les probl\u00e8mes pos\u00e9s et aussi les solutions propos\u00e9es. Elle explique clairement chaque point du projet sans \u00eatre trop technique pour que m\u00eame un non initi\u00e9 \u00e0 l'informatique puisse comprendre. I. Pr\u00e9sentation du projet Initiative Pays d'Arles est une entreprise qui propose un dispositif d\u2019accompagnement et de financement destin\u00e9 aux porteurs de projet souhaitant cr\u00e9er une entreprise. Dans le cadre de la construction de son espace de Coworking, Initiative Pays d'Arles souhaite mettre en place des outils de suivi, de gestion et de communication de ces activit\u00e9s. Le travail du groupe est d'analyser le besoin, proposer des solutions, les valider selon une priorit\u00e9 \u00e0 mettre en place, stabiliser le syst\u00e8me de ces applications et les tableaux de bords. II. Les \u00e9tudiants travaillant sur le projet Baptiste Marmier Pierre Roman Maxime Dupont Sebastien Carreno Adrien Durouge Axel Pilato III. Les langages utilis\u00e9s HTML - CSS JavaScript PHP - MySQL IV. Les fonctionnalit\u00e9s attendu Fonctionnalit\u00e9s Priorit\u00e9 Complexit\u00e9 Acc\u00e8der \u00e0 la pr\u00e9sentation 5 1 Visualiser les partenaires 5 1 Visualiser en 3D les espaces 1 2 Achat nombre de cr\u00e9dits 5 3 Forfait 3 mois 5 3 Contact 4 1 Forfait 6 mois 5 3 Forfait 12 mois 5 3 Agenda des \u00e9v\u00e9nements public 2 2 Agenda r\u00e9servation 3 8 Acc\u00e8s \u00e0 l'annuaire des membres 3 8 Acc\u00e8s aux \u00e9v\u00e9nements priv\u00e9 3 5 Acc\u00e8s aux petites annonces 3 3 Ajouter des espaces 5 8 Ajouter des forfaits 5 8 V. L'API Pour r\u00e9aliser toutes les fonctionnalit\u00e9s attendues sur le site, nous avons pens\u00e9 \u00e0 r\u00e9aliser une API en json. API est l'acronyme d'Application Programming Interface, que l'on traduit en fran\u00e7ais par interface de programmation d'application. L'API peut \u00eatre r\u00e9sum\u00e9e \u00e0 une solution informatique qui permet \u00e0 des applications de communiquer entre elles et de s'\u00e9changer mutuellement des services ou des donn\u00e9es. Il s'agit en r\u00e9alit\u00e9 d'un ensemble de fonctions qui facilitent l'acc\u00e8s aux services d'une application. a) Les routes et les fonctions de l'API La table de routage est indispensable \u00e0 la navigation sur le site et permet une meilleure s\u00e9curit\u00e9. Chaque route permet d'acc\u00e9der \u00e0 une fonctionnalit\u00e9 diff\u00e9rente. Routes Param\u00e8tres Valeurs Retourn\u00e9 Description Token requis /users/register/ nom, prenom, email, password, (image), adresse, ville, tel {'id':id de l'utilisateur} S'enregistrer Non /users/login/ email, password {'userId':userId, 'token':token} Se connecter Non /users/info/ {'email:email, 'nom':nom, 'prenom':prenom, 'adresse':adresse, 'ville':ville,'tel':tel, 'idCat':idCat, 'id':id} Recuperer infos utilisateurs Oui /users/search recherche, (limit), (offset), (order) Pour chaque utilisateurs trouv\u00e9, renvoie ses infos execpt\u00e9 'idCat' Rechercher des utilisateurs Oui /users/info/update/nom nom renvoie toute les informations Modifier le nom utilisateur Oui /users/delete id {'succesful':'utilisateur supprim\u00e9'} Supprimer un utilisateur Oui /categorie/info/droits idCat Recupere tous les droits d'une categorie Oui /categorie/create libelle, accreditation, tableau de droit {'id':idCat} Ajouter une categorie Oui /lieu/ajouter libelle, prix {'id':idLieu} Ajouter un lieu Oui /lieu/search recherche, (limit), (offset), (order) Pour chaque lieux trouv\u00e9, renvoie le libelle et le prix Rechercher des lieux Oui /reservation/reserver dateDeb, dateFin, idLieu {'id':idReserv} Creer une reservation Oui b) Extrait de code de l'API Ceci est un extrait de la fonction \"register\" qui va permettre \u00e0 un utilisateur de se cr\u00e9er un compte. register: function (req, res) { //valeurs var nom = req.body.nom; var prenom = req.body.prenom; var email = req.body.email; var password =req.body.password; var categorie = 1; //gestion des erreurs de param\u00e8tre manquant if (nom == null) { return res.status(400).json({'error': 'nom manquant'}); } if (prenom == null){ return res.status(400).json({'error': 'prenom manquant'}); } if (email == null){ return res.status(400).json({'error': 'email manquant'}); } if (password == null){ return res.status(400).json({'error': 'mot de passe manquant'}); } if(nom.length >= 50 || nom.length <= 1){ return res.status(400).json({'error': 'le nom doit \u00eatre compris entre 2 et 50 caract\u00e8res'}); } if(prenom.length >= 25 || prenom.length <= 2){ return res.status(400).json({'error': 'le nom doit \u00eatre compris entre 3 et 25 caract\u00e8res'}); } if (!EMAIL_REGEX.test(email)){ return res.status(400).json({'error': 'email invalide'}); } if (!PASSWORD_REGEX.test(password)){ return res.status(400).json({'error': 'le mot de passe doit \u00eatre compris entre 4 et 11 caract\u00e8re et poc\u00e8der au moins 1 caract\u00e8re num\u00e9rique'}); } //gestion d'utilisateur existant models.User.findOne({ attributes: ['email'], where: { email: email} }).then(function(userFound){ if (!userFound){ bcryptjs.genSalt(10, function(err, salt) { bcryptjs.hash(password, salt, function(err, hash) { var newUser = models.User.create({ nom: nom, prenom : prenom, email: email, password: hash, idCat: categorie }).then(function (newUser) { return res.status(201).json({'id': newUser.id}); }).catch(function (err) { return res.status(500).json({'error': 'impossible d\\'add l\\'utilisateur'}); }); }); }) } else return res.status(409).json({'error': 'l\\'utilisateur existe d\u00e9j\u00e0'}); }).catch(function (err) { return res.status(500).json({'error': 'impossible de check si l\\'user existe ' + err}); }); } c) Les codes de type de droit Chaque type d'utilisateurs sera associ\u00e9s \u00e0 plusieurs types de droit limitant ou non leurs acc\u00e8s. Code Lib\u00e9lle 000 - 999 Modification 001 Modifier la r\u00e9servation des utilisateur avec une accreditation inferieur 002 Modifier la r\u00e9servation detous les autres utilisateurs 010 Modifier ses propres \u00e9venements 011 Modifier les \u00e9venements des utilisateurs qui ont une accreditation inferieur 012 Modifier les \u00e9venements de tous les autres utilisateurs 022 Modifier tous les lieux 030 Modifier son propre profil utilisateur 031 Modifier le profil des utilisateurs qui ont un niveau d'accreditation inf\u00e9rieur au siens 032 Modifier tous les profils des utilisateurs 040 Modifier ses propres achats 041 Modifier les achats des utilisateur qui ont un niveau d'accreditation inf\u00e9rieur au siens 042 Modifier les achats de tous les utilisateurs 052 Modifier tous les forfaits 062 Modifier toutes les categories 1000 - 1999 Cr\u00e9ation 1000 Cr\u00e9ation de sa r\u00e9servation 1001 Cr\u00e9ation des r\u00e9servations des utilisateurs avec un niveau d'accreditation inferieur 1002 Cr\u00e9ation des r\u00e9servations de tous les utilisateurs 1012 Cr\u00e9ation d'evenement 1022 Cr\u00e9aton de lieu 1040 Acheter des credits pour soi 1041 Acheter des cr\u00e9dits pour ceux dont l'accreditation est inferieur \u00e0 la siennes 1042 Acheter des cr\u00e9dits pour nimporte quel utilisateur 1052 Cr\u00e9ation de forfaits 1062 Cr\u00e9ation de cat\u00e9gorie 2000 - 2999 Suppression 2000 Suppression de ses propres r\u00e9servations 2001 Suppression des r\u00e9servations des utilisateurs ayant une accr\u00e9ditation inferieur \u00e0 la sienne 2002 Suppression des r\u00e9servations de tous utilisateurs 2010 Suppression de ses propres \u00e9v\u00e8nements 2011 Suppression des \u00e9v\u00e8nements des utilisateurs dont l'accr\u00e9ditation est inferieur \u00e0 la siennes 2012 Suppression des \u00e9v\u00e8nements de tous les utilisateurs 2022 Suppression des lieux 2030 Supprimer son profil utilisateur 2031 Supprimer le profil des utilisateurs dont l'accreditation est inferieur \u00e0 la sienne 2032 Supprimer le profil de nimporte quel utilisateur 2040 Suppression de ses propres achats 2041 Suppression des achats des utilisateur dont l'accreditation est inferieur \u00e0 la siennes 2042 Suppression des achats de nimporte quel utilisateur 2052 Suppression de forfaits 2061 Suppression de categorie dont l'accreditation est inferieur \u00e0 son accr\u00e9ditation 2062 Suppression de categorie d) Les codes d'erreur VI. Base de Donn\u00e9es La base de donn\u00e9es est un point central dans la cr\u00e9ation et la gestion du site car elle va permettre de stocker toutes les informations n\u00e9cessaires au bon fonctionnement du site et elle permet aussi l'expansion pour des modifications futures. Cette base de donn\u00e9es contient 12 tables. Nom de la table Fonctionnalit\u00e9s Exemple contenu d'une table User Informations relative \u00e0 un utilisateur (nom, prenom, ville, mdp, image, etc.) Categorie Permet de savoir le type de chaque utilisateur (coworker, administrateur) Droit Associe chaque cat\u00e9gorie d'utilisateurs \u00e0 des types de droit pr\u00e9-enregistrer (admin : [2062; 1022; 1062; etc.]) TypeDroit Contient tous les types de droit (d\u00e9j\u00e0 vu plus haut) Achat Permet de gerer l'achat de forfait pour les utilisateurs Forfait Informations relative \u00e0 un forfait (nombre de cr\u00e9dits, prix, nom, etc.) Reservation Informations n\u00e9cessaire pour r\u00e9server (date de d\u00e9but, date de fin, l'utilisateur, etc.) Lieu Informations relative \u00e0 un lieu (prix, description) LieuEvent Associe un lieu \u00e0 un \u00e9venement (date, heure, lieu et evenement) Evenement Informations n\u00e9cessaire pour un \u00e9venement (adresse, description) Participation Associe un utilisateur \u00e0 un \u00e9venement pour montrer sa participation Partenaire Informations relative \u00e0 un partenaire (nom, URL site, logo, etc.) VII. Page d'accueil Ceci sont des exemples de pages web possible pour le site web de coworking. Les pages ont \u00e9tait r\u00e9alis\u00e9 gr\u00e2ce au Framework \"Angular\" d\u00e9velopp\u00e9 par Google, qui permet de r\u00e9aliser des pages web dynamiques et mieux optimis\u00e9s. Le site web est r\u00e9alis\u00e9 en \"Responsive\", c'est-\u00e0-dire que le site s'adapte \u00e0 la taille de l'\u00e9cran ainsi qu'aux mobiles, tablettes et t\u00e9l\u00e9visions avec le m\u00eame confort visuel. a) Version ordinateur Page d'accueil du site de CoWorking r\u00e9sumant le principe, l'histoire de la ville, le lieu ainsi qu'un footer regroupant toutes les informations, r\u00e9seaux pour contacter l'entreprise. b) Version mobile M\u00eame chose que pr\u00e9cedemment mais en version mobile avec les images adapt\u00e9e et optimis\u00e9 pour tous les types d'\u00e9crans, petit ou grand. c) Page de connection/cr\u00e9ation Page de connection pour les adh\u00e9rents poss\u00e8dant d\u00e9j\u00e0 un compte. Il leur suffit de s'authentifier via l'adresse email et le mot de passe qu'ils ont d\u00e9fini lors de la cr\u00e9ation de leur compte. Page de cr\u00e9ation du compte adh\u00e9rent n\u00e9cessitant uniquement les informations obligatoires. Le mot de passe n'a pour l'instant aucune condition particuli\u00e8re mais ceci peut \u00eatre modifi\u00e9 tr\u00e8s simplement. d) Espace personnel des adh\u00e9rents Userboard ou espace personnel de chaque utilisateur depuis celui-ci chaque utilisateur peut : G\u00e9rer ses cr\u00e9dits (voir les fonds de son porte-monnaie et ajouter des fonds) Acc\u00e9der \u00e0 l'agenda (voir les salles r\u00e9server ou en r\u00e9server, consulter les \u00e9v\u00e9nements) Acc\u00e9der \u00e0 un annuaire des membres M\u00eame chose que pr\u00e9c\u00e9demment mais en version mobile. e) Extrait de code app.module.ts //import des modules import { BrowserModule } from '@angular/platform-browser'; import { NgModule } from '@angular/core'; import { AppRoutingModule } from './app-routing.module'; import { AppComponent } from './app.component'; import { LoginComponent } from './login/login.component'; import { UserSpaceComponent } from './user-space/user-space.component'; import {RouterModule, Routes} from '@angular/router' @NgModule({ declarations: [ AppComponent, LoginComponent, UserSpaceComponent ], imports: [ BrowserModule, AppRoutingModule, RouterModule.forRoot([ {path: 'login', component:LoginComponent} ]) ], providers: [], bootstrap: [AppComponent] }) export class AppModule { } index.html <!doctype html> <html lang=\"fr\"> <head> <meta charset=\"utf-8\"> <title>CoWorkArles</title> <base href=\"/\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"icon\" href=\"assets/arles.png\" /> </head> <body> <app-root></app-root> </body> </html> f) Liste des modules VIII. Calendrier R\u00e9aliser un calendrier \u00e9tait tr\u00e8s important dans ce projet car c'est autour de lui que va se mettre en place toute l'organisation de l'espace Coworking. Le calendrier a diverses fonctionnalit\u00e9s qui changent selon les types d'utilisateurs. a) Adh\u00e9rents Les adh\u00e9rents peuvent consulter le calendrier pour voir les r\u00e9servations et les \u00e9v\u00e9nements. Ils peuvent aussi r\u00e9server des salles ou des bureaux en cliquant sur une case vide et en compl\u00e9tant un formulaire de r\u00e9servations. Les r\u00e9servations se font par quart d'heure. Chaque adh\u00e9rent peut cliquer sur une date d'\u00e9v\u00e9nement pour avoir acc\u00e8s \u00e0 de multiples informations telles que : la date et l'heure, le titre, la description ainsi que le lieu. b) Administrateurs c) Formulaire de r\u00e9servation","title":"Documentation - Coworking"},{"location":"#documentation-coworking","text":"Cette documentation a pour but de pr\u00e9senter le projet de CoWorking de l'entreprise Initiative Pays d'Arles, ses intervenants, les probl\u00e8mes pos\u00e9s et aussi les solutions propos\u00e9es. Elle explique clairement chaque point du projet sans \u00eatre trop technique pour que m\u00eame un non initi\u00e9 \u00e0 l'informatique puisse comprendre.","title":"Documentation - Coworking"},{"location":"#i-presentation-du-projet","text":"Initiative Pays d'Arles est une entreprise qui propose un dispositif d\u2019accompagnement et de financement destin\u00e9 aux porteurs de projet souhaitant cr\u00e9er une entreprise. Dans le cadre de la construction de son espace de Coworking, Initiative Pays d'Arles souhaite mettre en place des outils de suivi, de gestion et de communication de ces activit\u00e9s. Le travail du groupe est d'analyser le besoin, proposer des solutions, les valider selon une priorit\u00e9 \u00e0 mettre en place, stabiliser le syst\u00e8me de ces applications et les tableaux de bords.","title":"I.  Pr\u00e9sentation du projet"},{"location":"#ii-les-etudiants-travaillant-sur-le-projet","text":"Baptiste Marmier Pierre Roman Maxime Dupont Sebastien Carreno Adrien Durouge Axel Pilato","title":"II. Les \u00e9tudiants travaillant sur le projet"},{"location":"#iii-les-langages-utilises","text":"HTML - CSS JavaScript PHP - MySQL","title":"III. Les langages utilis\u00e9s"},{"location":"#iv-les-fonctionnalites-attendu","text":"Fonctionnalit\u00e9s Priorit\u00e9 Complexit\u00e9 Acc\u00e8der \u00e0 la pr\u00e9sentation 5 1 Visualiser les partenaires 5 1 Visualiser en 3D les espaces 1 2 Achat nombre de cr\u00e9dits 5 3 Forfait 3 mois 5 3 Contact 4 1 Forfait 6 mois 5 3 Forfait 12 mois 5 3 Agenda des \u00e9v\u00e9nements public 2 2 Agenda r\u00e9servation 3 8 Acc\u00e8s \u00e0 l'annuaire des membres 3 8 Acc\u00e8s aux \u00e9v\u00e9nements priv\u00e9 3 5 Acc\u00e8s aux petites annonces 3 3 Ajouter des espaces 5 8 Ajouter des forfaits 5 8","title":"IV.  Les fonctionnalit\u00e9s attendu"},{"location":"#v-lapi","text":"Pour r\u00e9aliser toutes les fonctionnalit\u00e9s attendues sur le site, nous avons pens\u00e9 \u00e0 r\u00e9aliser une API en json. API est l'acronyme d'Application Programming Interface, que l'on traduit en fran\u00e7ais par interface de programmation d'application. L'API peut \u00eatre r\u00e9sum\u00e9e \u00e0 une solution informatique qui permet \u00e0 des applications de communiquer entre elles et de s'\u00e9changer mutuellement des services ou des donn\u00e9es. Il s'agit en r\u00e9alit\u00e9 d'un ensemble de fonctions qui facilitent l'acc\u00e8s aux services d'une application.","title":"V. L'API"},{"location":"#a-les-routes-et-les-fonctions-de-lapi","text":"La table de routage est indispensable \u00e0 la navigation sur le site et permet une meilleure s\u00e9curit\u00e9. Chaque route permet d'acc\u00e9der \u00e0 une fonctionnalit\u00e9 diff\u00e9rente. Routes Param\u00e8tres Valeurs Retourn\u00e9 Description Token requis /users/register/ nom, prenom, email, password, (image), adresse, ville, tel {'id':id de l'utilisateur} S'enregistrer Non /users/login/ email, password {'userId':userId, 'token':token} Se connecter Non /users/info/ {'email:email, 'nom':nom, 'prenom':prenom, 'adresse':adresse, 'ville':ville,'tel':tel, 'idCat':idCat, 'id':id} Recuperer infos utilisateurs Oui /users/search recherche, (limit), (offset), (order) Pour chaque utilisateurs trouv\u00e9, renvoie ses infos execpt\u00e9 'idCat' Rechercher des utilisateurs Oui /users/info/update/nom nom renvoie toute les informations Modifier le nom utilisateur Oui /users/delete id {'succesful':'utilisateur supprim\u00e9'} Supprimer un utilisateur Oui /categorie/info/droits idCat Recupere tous les droits d'une categorie Oui /categorie/create libelle, accreditation, tableau de droit {'id':idCat} Ajouter une categorie Oui /lieu/ajouter libelle, prix {'id':idLieu} Ajouter un lieu Oui /lieu/search recherche, (limit), (offset), (order) Pour chaque lieux trouv\u00e9, renvoie le libelle et le prix Rechercher des lieux Oui /reservation/reserver dateDeb, dateFin, idLieu {'id':idReserv} Creer une reservation Oui","title":"a) Les routes et les fonctions de l'API"},{"location":"#b-extrait-de-code-de-lapi","text":"Ceci est un extrait de la fonction \"register\" qui va permettre \u00e0 un utilisateur de se cr\u00e9er un compte. register: function (req, res) { //valeurs var nom = req.body.nom; var prenom = req.body.prenom; var email = req.body.email; var password =req.body.password; var categorie = 1; //gestion des erreurs de param\u00e8tre manquant if (nom == null) { return res.status(400).json({'error': 'nom manquant'}); } if (prenom == null){ return res.status(400).json({'error': 'prenom manquant'}); } if (email == null){ return res.status(400).json({'error': 'email manquant'}); } if (password == null){ return res.status(400).json({'error': 'mot de passe manquant'}); } if(nom.length >= 50 || nom.length <= 1){ return res.status(400).json({'error': 'le nom doit \u00eatre compris entre 2 et 50 caract\u00e8res'}); } if(prenom.length >= 25 || prenom.length <= 2){ return res.status(400).json({'error': 'le nom doit \u00eatre compris entre 3 et 25 caract\u00e8res'}); } if (!EMAIL_REGEX.test(email)){ return res.status(400).json({'error': 'email invalide'}); } if (!PASSWORD_REGEX.test(password)){ return res.status(400).json({'error': 'le mot de passe doit \u00eatre compris entre 4 et 11 caract\u00e8re et poc\u00e8der au moins 1 caract\u00e8re num\u00e9rique'}); } //gestion d'utilisateur existant models.User.findOne({ attributes: ['email'], where: { email: email} }).then(function(userFound){ if (!userFound){ bcryptjs.genSalt(10, function(err, salt) { bcryptjs.hash(password, salt, function(err, hash) { var newUser = models.User.create({ nom: nom, prenom : prenom, email: email, password: hash, idCat: categorie }).then(function (newUser) { return res.status(201).json({'id': newUser.id}); }).catch(function (err) { return res.status(500).json({'error': 'impossible d\\'add l\\'utilisateur'}); }); }); }) } else return res.status(409).json({'error': 'l\\'utilisateur existe d\u00e9j\u00e0'}); }).catch(function (err) { return res.status(500).json({'error': 'impossible de check si l\\'user existe ' + err}); }); }","title":"b) Extrait de code de l'API"},{"location":"#c-les-codes-de-type-de-droit","text":"Chaque type d'utilisateurs sera associ\u00e9s \u00e0 plusieurs types de droit limitant ou non leurs acc\u00e8s. Code Lib\u00e9lle 000 - 999 Modification 001 Modifier la r\u00e9servation des utilisateur avec une accreditation inferieur 002 Modifier la r\u00e9servation detous les autres utilisateurs 010 Modifier ses propres \u00e9venements 011 Modifier les \u00e9venements des utilisateurs qui ont une accreditation inferieur 012 Modifier les \u00e9venements de tous les autres utilisateurs 022 Modifier tous les lieux 030 Modifier son propre profil utilisateur 031 Modifier le profil des utilisateurs qui ont un niveau d'accreditation inf\u00e9rieur au siens 032 Modifier tous les profils des utilisateurs 040 Modifier ses propres achats 041 Modifier les achats des utilisateur qui ont un niveau d'accreditation inf\u00e9rieur au siens 042 Modifier les achats de tous les utilisateurs 052 Modifier tous les forfaits 062 Modifier toutes les categories 1000 - 1999 Cr\u00e9ation 1000 Cr\u00e9ation de sa r\u00e9servation 1001 Cr\u00e9ation des r\u00e9servations des utilisateurs avec un niveau d'accreditation inferieur 1002 Cr\u00e9ation des r\u00e9servations de tous les utilisateurs 1012 Cr\u00e9ation d'evenement 1022 Cr\u00e9aton de lieu 1040 Acheter des credits pour soi 1041 Acheter des cr\u00e9dits pour ceux dont l'accreditation est inferieur \u00e0 la siennes 1042 Acheter des cr\u00e9dits pour nimporte quel utilisateur 1052 Cr\u00e9ation de forfaits 1062 Cr\u00e9ation de cat\u00e9gorie 2000 - 2999 Suppression 2000 Suppression de ses propres r\u00e9servations 2001 Suppression des r\u00e9servations des utilisateurs ayant une accr\u00e9ditation inferieur \u00e0 la sienne 2002 Suppression des r\u00e9servations de tous utilisateurs 2010 Suppression de ses propres \u00e9v\u00e8nements 2011 Suppression des \u00e9v\u00e8nements des utilisateurs dont l'accr\u00e9ditation est inferieur \u00e0 la siennes 2012 Suppression des \u00e9v\u00e8nements de tous les utilisateurs 2022 Suppression des lieux 2030 Supprimer son profil utilisateur 2031 Supprimer le profil des utilisateurs dont l'accreditation est inferieur \u00e0 la sienne 2032 Supprimer le profil de nimporte quel utilisateur 2040 Suppression de ses propres achats 2041 Suppression des achats des utilisateur dont l'accreditation est inferieur \u00e0 la siennes 2042 Suppression des achats de nimporte quel utilisateur 2052 Suppression de forfaits 2061 Suppression de categorie dont l'accreditation est inferieur \u00e0 son accr\u00e9ditation 2062 Suppression de categorie","title":"c) Les codes de type de droit"},{"location":"#d-les-codes-derreur","text":"","title":"d) Les codes d'erreur"},{"location":"#vi-base-de-donnees","text":"La base de donn\u00e9es est un point central dans la cr\u00e9ation et la gestion du site car elle va permettre de stocker toutes les informations n\u00e9cessaires au bon fonctionnement du site et elle permet aussi l'expansion pour des modifications futures. Cette base de donn\u00e9es contient 12 tables. Nom de la table Fonctionnalit\u00e9s Exemple contenu d'une table User Informations relative \u00e0 un utilisateur (nom, prenom, ville, mdp, image, etc.) Categorie Permet de savoir le type de chaque utilisateur (coworker, administrateur) Droit Associe chaque cat\u00e9gorie d'utilisateurs \u00e0 des types de droit pr\u00e9-enregistrer (admin : [2062; 1022; 1062; etc.]) TypeDroit Contient tous les types de droit (d\u00e9j\u00e0 vu plus haut) Achat Permet de gerer l'achat de forfait pour les utilisateurs Forfait Informations relative \u00e0 un forfait (nombre de cr\u00e9dits, prix, nom, etc.) Reservation Informations n\u00e9cessaire pour r\u00e9server (date de d\u00e9but, date de fin, l'utilisateur, etc.) Lieu Informations relative \u00e0 un lieu (prix, description) LieuEvent Associe un lieu \u00e0 un \u00e9venement (date, heure, lieu et evenement) Evenement Informations n\u00e9cessaire pour un \u00e9venement (adresse, description) Participation Associe un utilisateur \u00e0 un \u00e9venement pour montrer sa participation Partenaire Informations relative \u00e0 un partenaire (nom, URL site, logo, etc.)","title":"VI. Base de Donn\u00e9es"},{"location":"#vii-page-daccueil","text":"Ceci sont des exemples de pages web possible pour le site web de coworking. Les pages ont \u00e9tait r\u00e9alis\u00e9 gr\u00e2ce au Framework \"Angular\" d\u00e9velopp\u00e9 par Google, qui permet de r\u00e9aliser des pages web dynamiques et mieux optimis\u00e9s. Le site web est r\u00e9alis\u00e9 en \"Responsive\", c'est-\u00e0-dire que le site s'adapte \u00e0 la taille de l'\u00e9cran ainsi qu'aux mobiles, tablettes et t\u00e9l\u00e9visions avec le m\u00eame confort visuel.","title":"VII. Page d'accueil"},{"location":"#a-version-ordinateur","text":"Page d'accueil du site de CoWorking r\u00e9sumant le principe, l'histoire de la ville, le lieu ainsi qu'un footer regroupant toutes les informations, r\u00e9seaux pour contacter l'entreprise.","title":"a) Version ordinateur"},{"location":"#b-version-mobile","text":"M\u00eame chose que pr\u00e9cedemment mais en version mobile avec les images adapt\u00e9e et optimis\u00e9 pour tous les types d'\u00e9crans, petit ou grand.","title":"b) Version mobile"},{"location":"#c-page-de-connectioncreation","text":"Page de connection pour les adh\u00e9rents poss\u00e8dant d\u00e9j\u00e0 un compte. Il leur suffit de s'authentifier via l'adresse email et le mot de passe qu'ils ont d\u00e9fini lors de la cr\u00e9ation de leur compte. Page de cr\u00e9ation du compte adh\u00e9rent n\u00e9cessitant uniquement les informations obligatoires. Le mot de passe n'a pour l'instant aucune condition particuli\u00e8re mais ceci peut \u00eatre modifi\u00e9 tr\u00e8s simplement.","title":"c) Page de connection/cr\u00e9ation"},{"location":"#d-espace-personnel-des-adherents","text":"Userboard ou espace personnel de chaque utilisateur depuis celui-ci chaque utilisateur peut : G\u00e9rer ses cr\u00e9dits (voir les fonds de son porte-monnaie et ajouter des fonds) Acc\u00e9der \u00e0 l'agenda (voir les salles r\u00e9server ou en r\u00e9server, consulter les \u00e9v\u00e9nements) Acc\u00e9der \u00e0 un annuaire des membres M\u00eame chose que pr\u00e9c\u00e9demment mais en version mobile.","title":"d) Espace personnel des adh\u00e9rents"},{"location":"#e-extrait-de-code","text":"app.module.ts //import des modules import { BrowserModule } from '@angular/platform-browser'; import { NgModule } from '@angular/core'; import { AppRoutingModule } from './app-routing.module'; import { AppComponent } from './app.component'; import { LoginComponent } from './login/login.component'; import { UserSpaceComponent } from './user-space/user-space.component'; import {RouterModule, Routes} from '@angular/router' @NgModule({ declarations: [ AppComponent, LoginComponent, UserSpaceComponent ], imports: [ BrowserModule, AppRoutingModule, RouterModule.forRoot([ {path: 'login', component:LoginComponent} ]) ], providers: [], bootstrap: [AppComponent] }) export class AppModule { } index.html <!doctype html> <html lang=\"fr\"> <head> <meta charset=\"utf-8\"> <title>CoWorkArles</title> <base href=\"/\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"icon\" href=\"assets/arles.png\" /> </head> <body> <app-root></app-root> </body> </html>","title":"e) Extrait de code"},{"location":"#f-liste-des-modules","text":"","title":"f) Liste des modules"},{"location":"#viii-calendrier","text":"R\u00e9aliser un calendrier \u00e9tait tr\u00e8s important dans ce projet car c'est autour de lui que va se mettre en place toute l'organisation de l'espace Coworking. Le calendrier a diverses fonctionnalit\u00e9s qui changent selon les types d'utilisateurs.","title":"VIII. Calendrier"},{"location":"#a-adherents","text":"Les adh\u00e9rents peuvent consulter le calendrier pour voir les r\u00e9servations et les \u00e9v\u00e9nements. Ils peuvent aussi r\u00e9server des salles ou des bureaux en cliquant sur une case vide et en compl\u00e9tant un formulaire de r\u00e9servations. Les r\u00e9servations se font par quart d'heure. Chaque adh\u00e9rent peut cliquer sur une date d'\u00e9v\u00e9nement pour avoir acc\u00e8s \u00e0 de multiples informations telles que : la date et l'heure, le titre, la description ainsi que le lieu.","title":"a) Adh\u00e9rents"},{"location":"#b-administrateurs","text":"","title":"b) Administrateurs"},{"location":"#c-formulaire-de-reservation","text":"","title":"c) Formulaire de r\u00e9servation"}]}